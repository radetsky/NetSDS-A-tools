
// NetStyle's macro list. 
// You may use it for free. 

macro standartize_msisdn () { 
	
//*******************************************************************
// Callerid(num) <= 4 have only external devices like GSM gateways
// That devices gives us callerid as "80123456789" <103>, for example.
// Always cut CALLERID to 10 digits. For example: 0504139380  
//*******************************************************************
	if ( ${LEN(${CALLERIDNUM})} <= 4 ) {
		CALLERIDNUM = "${CALLERID(name)}"; 
	}
	if ( ${LEN(${CALLERIDNUM})} > 10 ) {
		PREFIXLEN   = ${LEN(${CALLERIDNUM})} - 10; 
		CALLERIDNUM = ${CALLERIDNUM:${PREFIXLEN}:10}; 
	};
	Set(CALLERID(all)="0${CALLERIDNUM}");
	return;
}; 

macro confirm_answer() { 
	Set(CDR(userfield)="ANSWER,${UUID}"); 
}; 

macro enter_queue (queuename) {
	Answer();
	Wait(0.5);
	CHANTYPE=${CHANNEL(channeltype)};
    	if ("${CHANTYPE}" = "SIP") {
		AddQueueMember(${queuename});
    		switch(${AQMSTATUS}) {
        		case ADDED:
            			Playback (agent-loginok);
            			AGENTIP=${SIPPEER(${CALLERID(num)})};
            			Set(DB(${CALLERID(num)}/ip)=${AGENTIP});
            			break;
        		case MEMBERALREADY:
            			Playback (agent-alreadyon);
            			AGENTIP=${SIPPEER(${CALLERID(num)})};
            			Set(DB(${CALLERID(num)}/ip)=${AGENTIP});
            			break;
        		case NOSUCHQUEUE:
            			Playback (agent-incorrect);
            			break;
        		default:
           			 break;
    		}
	}
	return;
}; 

macro exit_queue (queuename) { 
	Answer(); 
  	Wait(0.5); 
  	CHANTYPE=${CHANNEL(channeltype)};
  	if ("${CHANTYPE}" = "SIP") {
		RemoveQueueMember(${queuename});
          	switch(${RQMSTATUS}) {
           case REMOVED:
               Playback (agent-loggedoff);
               DBDel(${CALLERID(num)}/ip);
               break;
           case NOTINQUEUE:
               Playback (agent-loggedoff);
               break;
           case NOSUCHQUEUE:
               Playback (agent-incorrect);
               break;
           default:
           	break;
    	};
  	}; 
 	return; 
}; 

//********************************************************************
//* Make outgoing calls
//********************************************************************
macro out-call(CallerID) {
    Set(__DYNAMIC_FEATURES=officepark); 
    Set(DYNAMIC_FEATURES=officepark); 
    AGI(uuid.pl);
    NoOp(UUID=${UUID});
    Set(MONITOR_FILENAME=${STRFTIME(${EPOCH},,%Y%m%d)}_${UUID});
    Set(TIMEOUT(absolute)=3600);
    Set(CHANNEL(language)=ru);
    Set(CDR(userfield)=OUTGOING,${UUID});
    Set(CALLERID(all)=${CallerID});
    MixMonitor(${MONITOR_FILENAME}.wav);
    return; 
};

//*********************
//* Make local calls 
//********************* 
macro local-call() {
    AGI(uuid.pl);
    NoOp(UUID=${UUID});
    Set(MONITOR_FILENAME=${STRFTIME(${EPOCH},,%Y%m%d)}_${UUID});
    Set(TIMEOUT(absolute)=3600);
    Set(CHANNEL(language)=ru);
    Set(CDR(userfield)=LOCAL,${UUID});
    MixMonitor(${MONITOR_FILENAME}.wav);
    return;
};

//*********************
//* Make incoming call 
//*********************

macro init-call () { 
    &replace_callerid_num_by_name();
    &set_callerid_to_nine(); 
    AGI(uuid.pl);
    NoOp(UUID=${UUID});
    Set(MONITOR_FILENAME=${STRFTIME(${EPOCH},,%Y%m%d)}_${UUID});
    Set(TIMEOUT(absolute)=3600);
    Set(CHANNEL(language)=ru);
    Set(CDR(userfield)=INCOMING-CANCEL,${UUID});
    MixMonitor(${MONITOR_FILENAME}.wav); 

};

macro call-group(groupname) {
	Answer(); 
	Wait(1); 
	AGI(uuid.pl); 
    	NoOp(UUID=${UUID});
    	Set(MONITOR_FILENAME=${STRFTIME(${EPOCH},,%Y%m%d)}_${UUID});
    	Set(CDR(userfield)="GROUP,${UUID}");
    	MixMonitor(${MONITOR_FILENAME}.wav,b);
 	Set(QUEUE_PRIO=10); 
	Queue(${groupname}); 
}

//*********************
//* Make record of return to the  parked call
//***********************

macro make-record (first) {
    AGI(uuid.pl); 
    NoOp(UUID=${UUID});
    Set(MONITOR_FILENAME=${STRFTIME(${EPOCH},,%Y%m%d)}_${UUID});
    Set(CDR(userfield)="PARKED,${UUID}");
    MixMonitor(${MONITOR_FILENAME}.wav,b);
    NoOp("CDR_USERFIELD="${CDR(userfield)}); 
};
 
//// *********************** Enterprise Contexts and Macros *************************

context EnterprisePBXFunctions {
        includes {
                parkedcalls;
        };
// Park call
        _7[0-9]X => {
                PARKINGEXTEN=${EXTEN};
                ParkAndAnnounce(PARKED,6000,Console/dsp);
        };
// Unpark call
        _8[0-9]X => {
                Answer();
                UNPARK=${EXTEN} - 100;
                ParkedCall(${UNPARK}); 
        };
// Sets unconditional call forward
        *72 => {
                Answer();
                Read(DEST,dial,11,i,,60);
                NoOp(---===[[[ ${CALLERID(num)} set UNCONDITIONAL Call forward to  ' ${DEST} ' ]]]===---);
                Set(DB(UnconditionalCallForward/${CALLERID(num)})=${DEST});
                &PlayOK();
                Hangup();
        };
// Delete unconditional call forward
        *73 => {
                Answer();
                DOES_EXIST=${DB_EXISTS(UnconditionalCallForward/${CALLERID(num)})};
                if (${DOES_EXIST}=1) {
                        UN=${DB_DELETE(UnconditionalCallForward/${CALLERID(num)})};
                };
                NoOp(---===[[[ ${CALLERID(num)} unsets UNCONDITIONAL Call forward ]]]===---);
                &PlayOK();
                Hangup();
        };

// Dial my voicemail
        *97 => {
                Set(CHANNEL(language)=ru);
                VoiceMailMain(${CALLERID(num)}@default);
                HangUp(17);
        };
// Dial voicemail
        *98 => {
                Set(CHANNEL(language)=ru);
                VoiceMailMain();
                HangUp(17);
        };
// Spy on channel
        _555#XXXX => {
                SPY_EXTEN=${EXTEN:4:4};
                ChanSpy(SIP/${SPY_EXTEN});
        };
	*99 => { 
		Set(CHANNEL(language)=ru);
		MeetMe(1); 
		Hangup(17); 
	}; 
};
macro PlayOK() {
        Playback(beep);
        Wait(0.5);
        Playback(beep);
        return;
};

